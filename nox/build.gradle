buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.1.1'
  }
}
apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

repositories {
  jcenter()
}

android {
  compileSdkVersion 22
  buildToolsVersion "22.0.1"

  defaultConfig {
    minSdkVersion 9
    targetSdkVersion 22
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_6
    targetCompatibility JavaVersion.VERSION_1_6
  }

  sourceSets {
    test.java.srcDirs += 'build/generated/source/r/debug'
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile 'com.android.support:appcompat-v7:22.1.1'
  compile 'com.squareup.picasso:picasso:2.5.2'
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-all:1.9.5'
  testCompile 'org.robolectric:robolectric:2.4'
}

task checkstyle(type: Checkstyle) {
  configFile file('../config/checkstyle/checkstyle.xml')
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  classpath = files()
}

def coverageSourceDirs = ['src/main/java',
                          'src/gen']
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    html.enabled = true
  }

  // Class R is used, but usage will not be covered, so ignore this class from report
  classDirectories = fileTree(dir: './build/intermediates/classes/debug',
      excludes: ['**/R.class',
                 '**/R$*.class'])
  sourceDirectories = files(coverageSourceDirs)
  executionData = files('build/jacoco/testDebug.exec')
}

apply from: 'https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'